(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{361:function(n,e,t){"use strict";t.r(e);var a=t(42),r=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"typescript"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typescript"}},[n._v("#")]),n._v(" typescript")]),n._v(" "),t("p",[n._v("1、引入第三方插件：如jquery")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("cnpm install @type/jquery jquery--save\n\nimport * as $ from 'jquery\n")])])]),t("p",[n._v("2、数组对象定义：{}[]")]),n._v(" "),t("p",[n._v("3、数组")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("let data: number[]; // 数组只能存数字\n\n数组存多个类型使用元组tuple：let data:[number, string,boolean];// 顺序要对应\n\n超出越界部分，采用联合类型：data[3] = false, // 3可以存number，string,boolean\n")])])]),t("p",[n._v("4、联合类型：可以存不同类型")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("let a: string|number;\na = 'm'; a = 1;\n")])])]),t("p",[n._v("5、枚举:为数据赋予友好的名字")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("enum color {red, green} // 元素编号默认从0\ncolor.red // 0\n")])])]),t("p",[n._v("6、函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("使用noImplicitThis选项取消默认this的any设置\n\nfn(this:Document) {}\n在ts中函数的第一个this参数是用来设置this的类型约束的，是一个假参数，运行中不存在，是给ts检测使用的\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    没有返回值：void\n    function fn(x:number, y:string):string{\n        return x+y\n    }\n    let fn: (x:number, y:string) => string = function fn(x:number, y:string):string{\n        return x+y\n    }\n")])])]),t("p",[n._v("6-1、函数重载")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function fn(x:number, y:number):number;\nfunction fn(x:string, y:string):string;\n\nfn(x:any,y:any):any {\n    return x+y\n}\nfn(1,2);\nfn('a','b')\n")])])]),t("p",[n._v("7、类")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public公开的，所有地方可访问\nprotected受保护的，在内部或子类中可以访问\nproivate私有的，只能内部访问\nget a() {return this.age} // a为类的属性\n\n抽象类：abstract\n\nabstract class Person { // 抽象类不能实例化\n    username: string;\n    constructor(username:string) {\n        this.username = username;\n    }\n    say() {\n        console.log('234)\n    }\n\n    abstract study(): void // 抽象方法\n}\nclss Studen extends Person { // 继承抽象类必须实现所有的抽象方法，否则此类也必须是抽象类\n    study() {\n        console.log(‘学生方法’)\n    }\n}\n\n")])])]),t("p",[n._v("8、接口：定义的一种契约，ts用这个检测数据")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 只有抽象描述，不能有具体值\n    interface Options{\n        width: number,\n        height: number,\n        color?: string,  // 可选的\n        size: number\n    }\n\n// 只要包含其中一些规则即可\n    -- 可选  ？\n    -- 断言 as\n    function fn(opts: Options) {}\n    fn({\n        heidht:100,\n        width:50\n    } as Options) // as 断言告诉其符号Options规则\n\n**参数过于规则项，可先赋值给一个变量，绕开检测**\n    let obj = {\n        width: 50,\n        height:10,\n        size: 2,\n        a:1\n    }\n    fn(obj) // 可以\n\n **一组数字作为key值命名的， dom Node节点------索引签名**\n    // interface Options{\n        0:string,\n        1:string\n    }\n    // 索引签名key可以是number，也可以是string\n    interface Options{\n        // key是number，value是any类型\n        [attr: number]: any,\n        length: number\n    }\n\n**函数类型接口**\n\n    定义一个事件函数，那么必须定义一定的规则，不能随便吧一个函数赋值给事件\n    // 函数接口\n    interface IFn {\n        (x:number,y:number):number\n    }\n    let fn: IFn = function(x:number,y:number):number{return x + y}\n\n    // 定义一个接受MouseEvent类型参数的函数结构\n    interface MouseEveatCallBack{\n        (e: MouseEvent): any\n    }\n")])])]),t("p",[n._v("9、强制转换类型--类型断言")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("比如 let someValue: any = 'renmingming';\n1-使用<string>使用尖括号\n    let strlength: number = (<string>someValue).length;\n2-使用as\n    let strlength: number = (someValue as string).length\n")])])]),t("p",[n._v("10、对象结构制定类型")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("let o = {a: 1, b: 2};\n不能这样：let {a: aa, b: bb} = o;这样是属性重命名\n应该这样 let {a,b}: {a: number, b: number} = o;\n")])])]),t("p",[n._v("11、只读属性")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("interface Point {\n    readonly x: number\n    readonly y: number\n}\n\n泛型只读数组： ReadOnlyArray\nlet a: number[] = [1,2,3,4]\nlet ro: ReadOnlyArray<number> = a // 不能对ro修改push等\n\n变量使用const，属性使用Readonly\n")])])]),t("p",[n._v("12、额外属性检查-----索引签名")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("interface Point {\n    color?: string\n    // 除了color，可是有其他任意属性名\n    [propName: string]: any  // 索引属性名为字符串，值为any任意类型\n}\ninterface Person {\n    [index: number]: string\n}\nlet arr: Person = ['ren','ming','ming']\n")])])]),t("p",[n._v("13、定义类的接口：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("1、类的实例接口\n\n\n2、类的构造器接口  //静态部分\n\n```\n    interface ClockInterface {\n    tick()\n    }\n\n    interface ClockConstructor {\n    new(hour: number, minute: number): ClockInterface\n    }\n\n    function createClock(ctor: ClockConstructor, hour: number, minute: number): ClockInterface {\n    return new ctor(hour, minute)\n    }\n\n    class DigitalClock implements ClockInterface {\n    constructor(h: number, m: number) {\n\n    }\n    tick() {\n        console.log('beep bepp digitalclock')\n    }\n    }\n\n    class AnglogClock implements ClockInterface{\n    constructor(h: number, m: number) {\n\n    }\n    tick() {\n        console.log('anglogclock tick')\n    }\n    }\n\n    let digital = createClock(DigitalClock, 12, 17)\n    let anglog = createClock(AnglogClock, 20, 28)\n```\n")])])]),t("p",[n._v("14、混合类型")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("```\n    interface Counter{\n    (start: number): string\n    interval: number\n    reset(): void\n    }\n    function getCounter(): Counter{\n    let counter = (function(start: number) {\n\n    }) as Counter\n    counter.interval = 123\n    counter.reset = function() {}\n\n    return counter\n    }\n```\n")])])]),t("p",[n._v("15、接口继承类\n```\nclass Control{\nprivate state: any\n}")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("interface SelectionControl extends Control{\nselect()\n}\n\nclass Button extends Control implements SelectionControl{\nselect() {}\n}\nclass TextBox extends Control{\nselect() {}\n}\nclass ImageC implements SelectionControl{\n    // 错误\nselect() {\n\n}\n}\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\n16、类静态属性修改\n\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("// 修改静态属性值\nclass Greeter{\nstatic greeting = 'hello'\n}\nlet greeterMaker: typeof Greeter = Greeter\ngreeterMaker.greeting = 'hello word'\nlet greeter2: Greeter = new greeterMaker();\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\n17、泛型函数-----保持参数类型和返回类型一致\n\n    // 泛型类型变量\n\n")])])]),t("p",[n._v("function identity"),t("T",[n._v("(age: T): T{\n// T帮助我们捕获用户传入类型\nreturn arg\n}\n// let output = identity"),t("string",[n._v("('myString')\nlet output2 = identity('myString')")])],1)],1),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\n18、泛型接口\n\n")])])]),t("p",[n._v("function identity"),t("T",[n._v("(arg: T): T{\nreturn arg\n}\ninterface GenericIdentityFn"),t("T",[n._v(" {\n(arg: T): T\n}")])],1)],1),n._v(" "),t("p",[n._v("//interface GenericIdentityFn {\n//    "),t("T",[n._v("(arg: T): T\n//}")])],1),n._v(" "),t("p",[n._v("let myIdentity:GenericIdentityFn"),t("number",[n._v(" = identity")])],1),n._v(" "),t("p",[n._v("19、 泛型类")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class GenericNumber<T> {\n  zeroValue: T\n  add: (x: T, y: T) => T\n}\n\nlet myGenericNumber = new GenericNumber<number>()\nmyGenericNumber.zeroValue = 1\nmyGenericNumber.add = function(x, y) {\n  return x + y\n}\n")])])]),t("p",[n._v("20、 泛型约束")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function getProperty<T, K extends keyof T>(obj: T, key: K) {\n  return obj[key]\n}\nlet x = {a: 1, b: 2, c: 3, d: 4}\ngetProperty(x, 'a')\ngetProperty(x, 'm') // m参数报错，m是不是x的key\n\nfunction createInstance<T>(c: new() => T): T {\n  return new c()\n}\n")])])]),t("p",[n._v("21、 联合类型")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("interface Bird{\n  fly()\n  layEggs()\n}\ninterface Fish{\n  swim()\n  layEggs()\n}\n\nfunction getSmallPet(): Fish | Bird {\n\n}\nlet pet = getSmallPet()\npet.layEggs()\npet.swim() //报错，不是Fish和Bird共有的\n")])])]),t("p",[n._v("22、类型保护机制")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("--- 用户自定义\n\n--- typeof\n\n--- instanceof\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("if(isFish(pet)) {\n    pet.swim()\n} else {\n    pet.fily()\n}\nfunction isFish(pet: Fish | Bird): pet is Fish {\n    return (pet as Fish).swim !== undefined\n}\n")])])]),t("p",[n._v("23、null的类型保护")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function broken(name: string | null): string {\n    function postfix(epither: string) {\n        // !断言不为null\n        return name!.charAt(0) + '. the ' + epither\n    }\n\n    name = name || 'Bob'\n    return postfix(name)\n}\nbroken(null)\n")])])]),t("p",[n._v("24、vue中声明全局Window")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("在.d.ts中添加\n  interface Window {\n    test: string\n  }\n")])])]),t("p",[n._v("25、特殊符号用法")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1.属性或参数中使用？：表示属性或参数为可选项\n2.属性或参数总使用!: 表示强制解析，告诉typescript编译器，这里一定有值\n    const { resolved, rejected } = arr.shift()!\n    rejected在arr中是可选项，如果不加!就会报错\n3.变量后使用! ： 表示类型推断排除null、undefined\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);